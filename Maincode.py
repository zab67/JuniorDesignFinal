from PyQt6.QtGui import QPixmap
from PyQt6 import QtCore, QtGui, QtWidgets
from MainWindow import Ui_MainWindow  # Assuming MainWindow is your custom QMainWindow subclass
#Character class
import Character
from Character import *

class MainWindow(QtWidgets.QMainWindow):  # Subclass QMainWindow
    def __init__(self):
        super().__init__()
        self.ui = Ui_MainWindow()  # Initialize the UI generated by Qt Designer
        self.ui.setupUi(self)  # Set up the UI components

        #Light bleed enables
        self.ui.LLLB.stateChanged.connect(self.LeftLegLight)
        self.ui.RLLB.stateChanged.connect(self.RightLegLight)
        self.ui.LALB.stateChanged.connect(self.LeftArmLight)
        self.ui.RALB.stateChanged.connect(self.RightArmLight)
        self.ui.SLB.stateChanged.connect(self.StomachLight)
        self.ui.TLB.stateChanged.connect(self.ThoraxLight)
        self.ui.HLB.stateChanged.connect(self.HeadLight)

        #Heavy bleed enables
        self.ui.LLHB.stateChanged.connect(self.LeftLegHeavy)
        self.ui.RLHB.stateChanged.connect(self.RightLegHeavy)
        self.ui.LAHB.stateChanged.connect(self.LeftArmHeavy)
        self.ui.RAHB.stateChanged.connect(self.RightArmHeavy)
        self.ui.SHB.stateChanged.connect(self.StomachHeavy)
        self.ui.THB.stateChanged.connect(self.ThoraxHeavy)
        self.ui.HHB.stateChanged.connect(self.HeadHeavy)

        #Fracture enables
        self.ui.LLFB.stateChanged.connect(self.LeftLegFracture)
        self.ui.RLFB.stateChanged.connect(self.RightLegFracture)
        self.ui.LAFB.stateChanged.connect(self.LeftArmFracture)
        self.ui.RAFB.stateChanged.connect(self.RightArmFracture)

        #Health bar changes
        self.ui.LLHealth.returnPressed.connect(self.LeftLegHealth)
        self.ui.RLHealth.returnPressed.connect(self.RightLegHealth)
        self.ui.LAHealth.returnPressed.connect(self.LeftArmHealth)
        self.ui.RAHealth.returnPressed.connect(self.RightArmHealth)
        self.ui.SHealth.returnPressed.connect(self.StomachHealth)
        self.ui.THealth.returnPressed.connect(self.ThoraxHealth)
        self.ui.HHealth.returnPressed.connect(self.HeadHealth)
        

    #Functions for light bleeds
    def LeftLegLight(self):
        if self.ui.LLLB.isChecked():
            self.ui.LLL.show()
        else:
            self.ui.LLL.hide()

    def RightLegLight(self):
        if self.ui.RLLB.isChecked():
            self.ui.RLL.show()
        else:
            self.ui.RLL.hide()

    def LeftArmLight(self):
        if self.ui.LALB.isChecked():
            self.ui.LAL.show()
        else:
            self.ui.LAL.hide()
    
    def RightArmLight(self):
        if self.ui.RALB.isChecked():
            self.ui.RAL.show()
        else:
            self.ui.RAL.hide()
    
    def StomachLight(self):
        if self.ui.SLB.isChecked():
            self.ui.SL.show()
        else:
            self.ui.SL.hide()

    def ThoraxLight(self):
        if self.ui.TLB.isChecked():
            self.ui.TL.show()
        else:
            self.ui.TL.hide()

    def HeadLight(self):
        if self.ui.HLB.isChecked():
            self.ui.HL.show()
        else:
            self.ui.HL.hide()

    #Functions for heavy bleeds
    def LeftLegHeavy(self):
        if self.ui.LLHB.isChecked():
            self.ui.LLH.show()
        else:
            self.ui.LLH.hide()

    def RightLegHeavy(self):
        if self.ui.RLHB.isChecked():
            self.ui.RLH.show()
        else:
            self.ui.RLH.hide()

    def LeftArmHeavy(self):
        if self.ui.LAHB.isChecked():
            self.ui.LAH.show()
        else:
            self.ui.LAH.hide()
    
    def RightArmHeavy(self):
        if self.ui.RAHB.isChecked():
            self.ui.RAH.show()
        else:
            self.ui.RAH.hide()
    
    def StomachHeavy(self):
        if self.ui.SHB.isChecked():
            self.ui.SH.show()
        else:
            self.ui.SH.hide()

    def ThoraxHeavy(self):
        if self.ui.THB.isChecked():
            self.ui.TH.show()
        else:
            self.ui.TH.hide()

    def HeadHeavy(self):
        if self.ui.HHB.isChecked():
            self.ui.HH.show()
        else:
            self.ui.HH.hide()

    #Functions for fractures
    def LeftLegFracture(self):
        if self.ui.LLFB.isChecked():
            self.ui.LLB.show()
        else:
            self.ui.LLB.hide()
    
    def RightLegFracture(self):
        if self.ui.RLFB.isChecked():
            self.ui.RLB.show()
        else:
            self.ui.RLB.hide()

    def LeftArmFracture(self):
        if self.ui.LAFB.isChecked():
            self.ui.LAB.show()
        else:
            self.ui.LAB.hide()

    def RightArmFracture(self):
        if self.ui.RAFB.isChecked():
            self.ui.RAB.show()
        else:
            self.ui.RAB.hide()
  
    #Limb health functions
    def LeftLegHealth(self):
        try:
            val = int(self.ui.LLHealth.text())
            if(val >= 0 and val < 66):
                self.ui.LeftLegHealth.setValue(val)
                self.ui.LeftLegHealthValue.setText(str(val) + "/66")
        except:
            return

    def RightLegHealth(self):
        try:    
            val = int(self.ui.RLHealth.text())
            if(val >= 0 and val < 66):
                self.ui.RightLegHealth.setValue(val)
                self.ui.RightLegHealthValue.setText(str(val) + "/66")
        except:
            return

    def LeftArmHealth(self):
        try:
            val = int(self.ui.LAHealth.text())
            if(val >= 0 and val < 61):
                self.ui.LeftArmHealth.setValue(val)
                self.ui.LeftArmHealthValue.setText(str(val) + "/60")
        except:
            return

    def RightArmHealth(self):
        try:  
            val = int(self.ui.RAHealth.text())
            if(val >= 0 and val < 61):
                self.ui.RightArmHealth.setValue(val)
                self.ui.RightArmHealthValue.setText(str(val) + "/60")
        except:
            return      
    
    def StomachHealth(self):
        try:  
            val = int(self.ui.SHealth.text())
            if(val >= 0 and val < 71):
                self.ui.StomachHealth.setValue(val)
                self.ui.StomachHealthValue.setText(str(val) + "/70")
        except:
            return
        
    def ThoraxHealth(self):
        try:  
            val = int(self.ui.THealth.text())
            if(val >= 0 and val < 86):
                self.ui.ThoraxHealth.setValue(val)
                self.ui.ThoraxHealthValue.setText(str(val) + "/85")
        except:
            return
        
    def HeadHealth(self):
        try:  
            val = int(self.ui.HHealth.text())
            if(val >= 0 and val < 36):
                self.ui.HeadHealth.setValue(val)
                self.ui.HeadHealthValue.setText(str(val) + "/35")
        except:
            return

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    window = MainWindow()
    #Setting the images of User Interface
    pixmap = QPixmap("New folder/body.png")
    window.ui.Body.setPixmap(pixmap)
    pixmap = QPixmap("New folder/light.webp")
    window.ui.LLL.setPixmap(pixmap)
    window.ui.RLL.setPixmap(pixmap)
    window.ui.LAL.setPixmap(pixmap)
    window.ui.RAL.setPixmap(pixmap)
    window.ui.SL.setPixmap(pixmap)
    window.ui.TL.setPixmap(pixmap)
    window.ui.HL.setPixmap(pixmap)
    pixmap = QPixmap("New folder/heavy.webp")
    window.ui.LLH.setPixmap(pixmap)
    window.ui.RLH.setPixmap(pixmap)
    window.ui.LAH.setPixmap(pixmap)
    window.ui.RAH.setPixmap(pixmap)
    window.ui.SH.setPixmap(pixmap)
    window.ui.TH.setPixmap(pixmap)
    window.ui.HH.setPixmap(pixmap)
    pixmap = QPixmap("New folder/fracture.webp")
    window.ui.LLB.setPixmap(pixmap)
    window.ui.RLB.setPixmap(pixmap)
    window.ui.LAB.setPixmap(pixmap)
    window.ui.RAB.setPixmap(pixmap)
    pixmap = QPixmap("New folder/Pain.webp")
    window.ui.HP.setPixmap(pixmap)
    pixmap = QPixmap("New folder/Painkill.webp")
    window.ui.HPK.setPixmap(pixmap)
    pixmap = QPixmap("New folder/Overweight.webp")
    window.ui.HO.setPixmap(pixmap)
    pixmap = QPixmap("New folder/weight.png")
    window.ui.weight.setPixmap(pixmap)
    pixmap = QPixmap("New folder/water.png")
    window.ui.water.setPixmap(pixmap)
    pixmap = QPixmap("New folder/energy.png")
    window.ui.energy.setPixmap(pixmap)
    #Injectors
    pixmap = QPixmap("New folder/Morphine.webp")
    window.ui.Morphine.setPixmap(pixmap)
    pixmap = QPixmap("New folder/L1.webp")
    window.ui.L1.setPixmap(pixmap)
    pixmap = QPixmap("New folder/Trimadol.webp")
    window.ui.Trimadol.setPixmap(pixmap)
    pixmap = QPixmap("New folder/Adrenaline.webp")
    window.ui.Adrenaline.setPixmap(pixmap)
    pixmap = QPixmap("New folder/Propital.webp")
    window.ui.Propital.setPixmap(pixmap)
    pixmap = QPixmap("New folder/ETG.webp")
    window.ui.ETG.setPixmap(pixmap)
    pixmap = QPixmap("New folder/Perfotoran.webp")
    window.ui.Perfotora.setPixmap(pixmap)
    pixmap = QPixmap("New folder/AHF1.webp")
    window.ui.AHF1.setPixmap(pixmap)
    pixmap = QPixmap("New folder/Zagustin.webp")
    window.ui.Zagustin.setPixmap(pixmap)
    pixmap = QPixmap("New folder/PNB.webp")
    window.ui.PNB.setPixmap(pixmap)
    pixmap = QPixmap("New folder/Obdolbos.webp")
    window.ui.Obdolbos.setPixmap(pixmap)
    pixmap = QPixmap("New folder/Obdolbos2.webp")
    window.ui.Obdolbos2.setPixmap(pixmap)
    pixmap = QPixmap("New folder/M.U.L.E..webp")
    window.ui.MULE.setPixmap(pixmap)
    #default no status effects
    window.ui.LLL.hide()
    window.ui.LLH.hide()
    window.ui.LLB.hide()
    window.ui.RLL.hide()
    window.ui.RLH.hide()
    window.ui.RLB.hide()
    window.ui.LAL.hide()
    window.ui.LAH.hide()
    window.ui.LAB.hide()
    window.ui.RAL.hide()
    window.ui.RAH.hide()
    window.ui.RAB.hide()
    window.ui.SL.hide()
    window.ui.SH.hide()
    window.ui.TL.hide()
    window.ui.TH.hide()
    window.ui.HL.hide()
    window.ui.HH.hide()
    window.ui.HP.hide()
    window.ui.HPK.hide()
    window.ui.HO.hide()
    
    window.show()
    sys.exit(app.exec())
    